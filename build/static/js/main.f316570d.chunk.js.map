{"version":3,"sources":["store/Store.js","App.js","serviceWorker.js","index.js"],"names":["initialState","currentQuote","allQuote","App","state","isLoading","generateQuote","props","setCurrentQuoteDispatch","random","length","this","className","onClick","Component","connect","dispatch","curBase","type","payload","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAAMA,EAAe,CACnBC,aAAc,MACdC,SAAU,CACR,uCACA,KACA,WACA,SACA,8CACA,uCACA,uCACA,mC,0DCOEC,G,iNACJC,MAAQ,CACNC,WAAW,G,EAGbC,cAAgB,WAAO,IAAD,EAC0B,EAAKC,MAA3CL,EADY,EACZA,UAERM,EAHoB,EACFA,yBAEMN,EADDO,EAAO,EAAGP,EAASQ,OAAS,M,wEAI3C,IACAL,EAAcM,KAAKP,MAAnBC,UACAJ,EAAiBU,KAAKJ,MAAtBN,aACR,OACE,yBAAKW,UAAU,aACb,yBAAKA,UAAU,SACb,2BAEMP,EAAY,UAAYJ,IAIhC,4BACEW,UAAU,SACVC,QAASF,KAAKL,eAFhB,uF,GAvBUQ,cAkCHC,eA7CS,SAAC,GAAD,MAAiC,CACvDd,aADsB,EAAGA,aAEzBC,SAFsB,EAAiBA,aAKd,SAACc,GAAD,MAAe,CACxCR,wBAAyB,SAACS,GACxBD,EDEK,CACLE,KAAM,oBACNC,QCJyBF,QAsCdF,CAA6CZ,GCvCxCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,aHYP,WAAgD,IAA/BtB,EAA8B,uDAAtBJ,EAAc2B,EAAQ,uCAC5CT,EAAkBS,EAAlBT,KAAMC,EAAYQ,EAAZR,QACd,OAAQD,GACN,IAAK,oBACH,OAAO,eACFd,EADL,CAEEH,aAAckB,IAElB,QACE,OAAOf,MGnBbwB,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEJK,SAASC,eAAe,SDoHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f316570d.chunk.js","sourcesContent":["const initialState = {\n  currentQuote: 'Hio',\n  allQuote: [\n    'Привет',\n    'Hi',\n    'Bonjorno',\n    'Ni hao',\n    'Ты пидор',\n    'Отвали',\n    'Бесишь',\n    'Мразь',\n  ],\n}\n\nexport function setCurrentQuote(value) {\n  return {\n    type: 'SET_CURRENT_QUOTE',\n    payload: value,\n  }\n}\n\nexport function reducer(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case 'SET_CURRENT_QUOTE':\n      return {\n        ...state,\n        currentQuote: payload,\n      }\n    default:\n      return state;\n  }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setCurrentQuote } from './store/Store';\nimport * as random from 'random-int';\nimport './App.css';\n\nconst mapStateToProps = ({ currentQuote, allQuote }) => ({\n  currentQuote,\n  allQuote,\n}); \n\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentQuoteDispatch: (curBase) => {\n    dispatch(setCurrentQuote(curBase))\n  },\n});\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n  }\n\n  generateQuote = () => {\n    const { allQuote, setCurrentQuoteDispatch } = this.props;\n    const randomPosition = random(0, allQuote.length - 1);\n    setCurrentQuoteDispatch(allQuote[randomPosition]);\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    const { currentQuote } = this.props;\n    return (\n      <div className=\"container\">\n        <div className=\"quote\">\n          <p>\n              {\n                isLoading ? 'Loading' : currentQuote\n              }\n          </p>\n        </div>\n        <button\n          className=\"button\"\n          onClick={this.generateQuote}\n        >\n           Сгенерировать\n        </button>\n      </div>\n    );    \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer } from './store/Store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}